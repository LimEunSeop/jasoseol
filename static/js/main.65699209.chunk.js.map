{"version":3,"sources":["components/Calendar/Calendar.module.scss","components/JobItem/JobItem.module.scss","utils/normalizeDate.ts","utils/formatDateTime.ts","components/JobItem/JobItem.tsx","components/DateCell/DateCell.tsx","components/DateNav/DateNav.tsx","components/Calendar/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/DateCell/DateCell.module.scss","components/DateNav/DateNav.module.scss"],"names":["module","exports","normalizeDate","date","setHours","setMinutes","setSeconds","setMilliseconds","formatDateTime","dateArg","year","String","getFullYear","month","getMonth","padStart","getDate","hour","getHours","minute","getMinutes","JobType","Modal","setAppElement","cx","classnames","bind","styles","JobItem","data","type","useState","modalOpened","setModalOpened","startDate","Date","start_time","endDate","end_time","dateDifference","getTime","typeInfo","Start","label","display","class","End","console","error","closeModal","onClick","className","item","name","isOpen","onRequestClose","contentLabel","style","content","top","left","transform","width","height","maxWidth","modalHeader","src","image","alt","info","period","dateTime","toISOString","closeButton","dangerouslySetInnerHTML","__html","overflow","DateCell","startItems","endItems","container","items","startList","map","id","endList","DateNav","setDate","newDate","setMonth","currentMonth","toString","Calendar","useRef","Map","loading","setLoading","currentDate","setCurrentDate","dateList","useMemo","result","dateCounter","push","i","getDay","unshift","useEffect","fetch","then","res","json","jsonData","JSON","parse","stringify","sort","a","b","forEach","currentData","current","has","set","start_items","end_items","get","dates","days","day","Array","from","length","_","weekIdx","week","dateIdx","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65699209.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"Calendar_days__2vu6V\",\"day\":\"Calendar_day__1vRet\",\"week\":\"Calendar_week__B8Ymd\",\"dates\":\"Calendar_dates__11wFD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"JobItem_item__1aqF2\",\"label\":\"JobItem_label__3oLg8\",\"start\":\"JobItem_start__2EmrB\",\"end\":\"JobItem_end__1sji9\",\"name\":\"JobItem_name__2tz-6\",\"modalHeader\":\"JobItem_modalHeader__3NN_0\",\"closeButton\":\"JobItem_closeButton__20lUA\",\"info\":\"JobItem_info__1igoi\",\"period\":\"JobItem_period__1Iwly\",\"dateDifference\":\"JobItem_dateDifference__1rAjd\"};","/**\n *\n * 년-월-일 로만 Date 객체를 초기화하면 시간은 9 AM 으로 자동 세팅됩니다. 이 상태를 normal 상태로 가정하여,\n * 향후 년-월-일 로만 Date 객체의 정확한 비교를 위해 시간을 9시로 통일시키는 작업을 하는 함수입니다.\n *\n * @param date\n */\n\nexport default function normalizeDate(date: Date) {\n  date.setHours(9)\n  date.setMinutes(0)\n  date.setSeconds(0)\n  date.setMilliseconds(0)\n  return date\n}\n","export default function formatDateTime(dateArg: Date) {\n  const year: string = String(dateArg.getFullYear())\n  const month: string = String(dateArg.getMonth() + 1).padStart(2, '0')\n  const date: string = String(dateArg.getDate()).padStart(2, '0')\n  const hour: string = String(dateArg.getHours()).padStart(2, '0')\n  const minute: string = String(dateArg.getMinutes()).padStart(2, '0')\n\n  return `${year}.${month}.${date} ${hour}:${minute}`\n}\n","import React, { useState } from 'react'\nimport Modal from 'react-modal'\nimport styles from './JobItem.module.scss'\nimport formatDateTime from '../../utils/formatDateTime'\nimport normalizeDate from '../../utils/normalizeDate'\nimport classnames from 'classnames/bind'\n\nexport interface Job {\n  id: number\n  name: string\n  image: string\n  start_time: string\n  end_time: string\n  content: string\n}\n\nexport enum JobType {\n  Start,\n  End,\n}\n\ninterface Props {\n  data: Job\n  type: JobType\n}\n\nModal.setAppElement('#root')\n\nconst cx = classnames.bind(styles)\n\nconst JobItem = ({ data, type }: Props) => {\n  const [modalOpened, setModalOpened] = useState(false)\n\n  const startDate = new Date(data.start_time)\n  const endDate = new Date(data.end_time)\n\n  // 현재 날짜와 마감 날짜 사이의 차이. 하루가 86400000 ms 이므로 이를 나눠주면 몇일 차이가 나는지 계산이됨.\n  const dateDifference =\n    (normalizeDate(new Date()).getTime() -\n      normalizeDate(new Date(endDate)).getTime()) /\n    86400000\n\n  const typeInfo: { label?: string; display?: string; class?: string } = {}\n  switch (type) {\n    case JobType.Start:\n      typeInfo.label = '시작'\n      typeInfo.display = '시'\n      typeInfo.class = 'start'\n      break\n    case JobType.End:\n      typeInfo.label = typeInfo.display = '끝'\n      typeInfo.class = 'end'\n      break\n    default:\n      console.error('정의되지 않은 JobType')\n  }\n\n  function openModal() {\n    setModalOpened(true)\n  }\n\n  function closeModal() {\n    setModalOpened(false)\n  }\n\n  return (\n    <>\n      <button type=\"button\" onClick={openModal} className={styles.item}>\n        <span\n          aria-label={typeInfo.label}\n          className={cx('label', typeInfo.class)}\n        >\n          {typeInfo.display}\n        </span>\n        <span className={styles.name}>{data.name}</span>\n      </button>\n      {modalOpened && (\n        <Modal\n          isOpen={modalOpened}\n          onRequestClose={closeModal}\n          contentLabel={data.name}\n          style={{\n            content: {\n              top: '50%',\n              left: '50%',\n              transform: 'translate(-50%, -50%)',\n              width: '90%',\n              height: '90%',\n              maxWidth: '800px',\n            },\n          }}\n        >\n          <div className={styles.modalHeader}>\n            <img\n              src={data.image}\n              alt={`${data.name} 기업 이미지`}\n              width=\"100\"\n            />\n            <div className={styles.info}>\n              <b>{data.name}</b>\n              <div className={styles.period}>\n                <time dateTime={startDate.toISOString()}>\n                  {formatDateTime(startDate)}\n                </time>\n                <span className=\"a11y-hidden\">부터</span>\n                <span aria-hidden=\"true\"> ~ </span>\n                <time dateTime={endDate.toISOString()}>\n                  {formatDateTime(endDate)}\n                </time>\n                <span className=\"a11y-hidden\">까지</span>\n                <span className={styles.dateDifference}>\n                  {dateDifference === 0\n                    ? '오늘'\n                    : dateDifference > 0\n                    ? `${dateDifference}일 지남`\n                    : `${dateDifference}일 전`}\n                </span>\n              </div>\n            </div>\n            <button\n              type=\"button\"\n              aria-label=\"채용정보 닫기\"\n              className={styles.closeButton}\n              onClick={closeModal}\n            >\n              <span></span>\n              <span></span>\n            </button>\n          </div>\n\n          <div\n            dangerouslySetInnerHTML={{ __html: data.content }}\n            style={{ overflow: 'scroll' }}\n          ></div>\n        </Modal>\n      )}\n    </>\n  )\n}\n\nexport default JobItem\n","import React from 'react'\nimport styles from '../DateCell/DateCell.module.scss'\nimport JobItem, { Job, JobType } from '../JobItem/JobItem'\n\ninterface Props {\n  date: Date\n  startItems?: Job[]\n  endItems?: Job[]\n}\n\nconst DateCell = ({ date, startItems, endItems }: Props) => {\n  return (\n    <>\n      <div className={styles.container}>\n        <div className={styles.date}>{date.getDate()}</div>\n        <div className={styles.items}>\n          {startItems && (\n            <ul className={styles.startList}>\n              {startItems.map((item) => (\n                <li key={item.id} className={styles.item}>\n                  <JobItem data={item} type={JobType.Start} />\n                </li>\n              ))}\n            </ul>\n          )}\n          {endItems && (\n            <ul className={styles.endList}>\n              {endItems.map((item) => (\n                <li key={item.id} className={styles.item}>\n                  <JobItem data={item} type={JobType.End} />\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default DateCell\n","import React from 'react'\nimport styles from './DateNav.module.scss'\nimport classnames from 'classnames/bind'\n\ninterface Props {\n  date: Date\n  setDate: React.Dispatch<React.SetStateAction<Date>>\n}\n\nconst cx = classnames.bind(styles)\n\nconst DateNav = ({ date, setDate }: Props) => {\n  const handlePrev = () => {\n    const newDate = new Date(date)\n    newDate.setMonth(newDate.getMonth() - 1)\n    setDate(newDate)\n  }\n\n  const handleNext = () => {\n    const newDate = new Date(date)\n    newDate.setMonth(newDate.getMonth() + 1)\n    setDate(newDate)\n  }\n  return (\n    <div className={styles.container}>\n      <button\n        aria-label=\"이전달\"\n        onClick={handlePrev}\n        className={cx('button', 'prev')}\n      >\n        &lt;\n      </button>\n      <time className={styles.currentMonth} dateTime={date.toISOString()}>\n        {date.getFullYear()}.{(date.getMonth() + 1).toString().padStart(2, '0')}\n      </time>\n      <button\n        aria-label=\"다음달\"\n        onClick={handleNext}\n        className={cx('button', 'next')}\n      >\n        &gt;\n      </button>\n    </div>\n  )\n}\n\nexport default DateNav\n","import { useEffect, useMemo, useRef, useState } from 'react'\nimport normalizeDate from '../../utils/normalizeDate'\nimport DateCell from '../DateCell/DateCell'\nimport DateNav from '../DateNav/DateNav'\nimport { Job } from '../JobItem/JobItem'\nimport styles from './Calendar.module.scss'\n\nconst Calendar = () => {\n  const data = useRef(\n    new Map<number, { start_items: Job[]; end_items: Job[] }>()\n  )\n\n  const [loading, setLoading] = useState(false)\n  const [currentDate, setCurrentDate] = useState(new Date())\n\n  const dateList = useMemo(() => {\n    // 시작일 구하기\n    const startDate = new Date(currentDate)\n    startDate.setDate(1)\n    normalizeDate(startDate)\n    // 말일 구하기\n    const endDate = new Date(currentDate)\n    endDate.setMonth(endDate.getMonth() + 1)\n    endDate.setDate(0)\n    normalizeDate(endDate)\n\n    const result: Date[] = []\n\n    // 시작일 ~ 말일 사이의 Date 객체들 세팅하기\n    for (\n      let dateCounter = new Date(startDate);\n      dateCounter.getTime() <= endDate.getTime();\n      dateCounter.setDate(dateCounter.getDate() + 1)\n    ) {\n      const date = new Date(dateCounter)\n      normalizeDate(date)\n      result.push(date)\n    }\n\n    // 시작일 주의 이전달 Date 객체 삽입\n    for (let i = 1; i <= startDate.getDay(); i++) {\n      const date = new Date(startDate)\n      date.setDate(date.getDate() - i)\n      normalizeDate(date)\n      result.unshift(date)\n    }\n    // 말일 주의 이후달 Date 객체 삽입\n    for (let i = 1; i <= 6 - endDate.getDay(); i++) {\n      const date = new Date(endDate)\n      date.setDate(date.getDate() + i)\n      normalizeDate(date)\n      result.push(date)\n    }\n\n    return result\n  }, [currentDate])\n\n  useEffect(() => {\n    setLoading(true)\n\n    fetch(\n      'https://frontend-assignments.s3.ap-northeast-2.amazonaws.com/job_postings.json'\n    )\n      .then((res) => res.json())\n      .then((jsonData) => {\n        const sortedData = JSON.parse(JSON.stringify(jsonData)).sort(\n          (a: Job, b: Job) => a.name > b.name\n        )\n        sortedData.forEach((item: Job) => {\n          const start_time = new Date(item.start_time)\n          const end_time = new Date(item.end_time)\n\n          // 시간 9시로 표준화 작업: Date 객체를 날짜만 기입하여 생성하면 9시로 세팅됨. getTime()메서드로 정확한 키의 비교를 위함\n          normalizeDate(start_time)\n          normalizeDate(end_time)\n\n          const currentData = data.current\n\n          if (currentData.has(start_time.getTime()) === false) {\n            currentData.set(start_time.getTime(), {\n              start_items: [],\n              end_items: [],\n            })\n          }\n          if (currentData.has(end_time.getTime()) === false) {\n            currentData.set(end_time.getTime(), {\n              start_items: [],\n              end_items: [],\n            })\n          }\n\n          currentData.get(start_time.getTime())!.start_items.push(item)\n          currentData.get(end_time.getTime())!.end_items.push(item)\n        })\n\n        setLoading(false)\n      })\n  }, [])\n\n  if (loading) {\n    return <div>로딩중...</div>\n  }\n\n  return (\n    <section>\n      <header>\n        <h2 className=\"a11y-hidden\">채용달력</h2>\n        <DateNav date={currentDate} setDate={setCurrentDate} />\n      </header>\n      <div className={styles.dates}>\n        <div className={styles.days}>\n          <div className={styles.day}>일</div>\n          <div className={styles.day}>월</div>\n          <div className={styles.day}>화</div>\n          <div className={styles.day}>수</div>\n          <div className={styles.day}>목</div>\n          <div className={styles.day}>금</div>\n          <div className={styles.day}>토</div>\n        </div>\n        {Array.from(new Array(dateList.length / 7), (_, i) => i).map(\n          (weekIdx) => (\n            <div key={weekIdx} className={styles.week}>\n              {[\n                weekIdx * 7,\n                weekIdx * 7 + 1,\n                weekIdx * 7 + 2,\n                weekIdx * 7 + 3,\n                weekIdx * 7 + 4,\n                weekIdx * 7 + 5,\n                weekIdx * 7 + 6,\n              ].map((dateIdx) => (\n                <DateCell\n                  key={dateList[dateIdx].getTime()}\n                  date={dateList[dateIdx]}\n                  startItems={\n                    data.current.get(dateList[dateIdx].getTime())?.start_items\n                  }\n                  endItems={\n                    data.current.get(dateList[dateIdx].getTime())?.end_items\n                  }\n                />\n              ))}\n            </div>\n          )\n        )}\n      </div>\n    </section>\n  )\n}\n\nexport default Calendar\n","import React from 'react'\nimport Calendar from './components/Calendar/Calendar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <Calendar />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DateCell_container__xN8p7\",\"date\":\"DateCell_date__1cP5J\",\"items\":\"DateCell_items__3eLZ_\",\"item\":\"DateCell_item__1wqSE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"DateNav_container___6KfG\",\"button\":\"DateNav_button__1_y9h\",\"prev\":\"DateNav_prev__1EVp_\",\"next\":\"DateNav_next__nma4J\",\"currentMonth\":\"DateNav_currentMonth__22hkb\"};"],"sourceRoot":""}